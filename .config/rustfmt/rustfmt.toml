# https://github.com/rust-lang/rustfmt/blob/master/Configurations.md

# Allow unstable settings
unstable_features = true

# Require a specific version of rustfmt. If you want to make sure that the specific version of rustfmt is used in your CI, use this option.
#   Default value: CARGO_PKG_VERSION
#   Possible values: any published version (e.g. "0.3.8")
# required_version


# Which version of the formatting rules to use. Version::One is backwards-compatible with Rustfmt 1.0. Other versions are only backwards compatible within a major version number.
#   Default value: One
#   Possible values: One, Two
version = "Two"


# Number of spaces per tab
#   Default value: 4
#   Possible values: any positive integer
tab_spaces = 4


# Maximum width of each line
#   Default value: 100
#   Possible values: any positive integer
max_width = 120

# Maximum width of an array literal before falling back to vertical formatting.
#    Default value: 60
#    Possible values: any positive integer that is less than or equal to the value specified for max_width
array_width = 60

# Maximum width of the args of a function-like attributes before falling back to vertical formatting.
#    Default value: 70
#    Possible values: any positive integer that is less than or equal to the value specified for max_width
attr_fn_like_width = 70

# Where to put a binary operator when a binary expression goes multiline.
#    Default value: "Front"
#    Possible values: "Front", "Back"
binop_separator = "Front"


# Minimum number of blank lines which must be put between items. If two items have fewer blank lines between them, additional blank lines are inserted.
#   Default value: 0
#   Possible values: unsigned integer
blank_lines_lower_bound = 0


# Maximum number of blank lines which can be put between items. If more than this number of consecutive empty lines are found, they are trimmed down to match this integer.
#   Default value: 1
#   Possible values: any non-negative integer
blank_lines_upper_bound = 2


# Brace style for items
#   Default value: "SameLineWhere"
#   Possible values: "AlwaysNextLine", "PreferSameLine", "SameLineWhere"
brace_style = "AlwaysNextLine"


# Maximum width of a chain to fit on one line.
#   Default value: 60
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for chain_width will take precedence.
# chain_width = 60


# Whether to use colored output or not.
#   Default value: "Auto"
#   Possible values: "Auto", "Always", "Never"
color = "Auto"


# Combine control expressions with function calls.
# When true, puts control expressions like if, while and for on the same line as function calls if as a parameter, new line if false.
#   Default value: true
#   Possible values: true, false
combine_control_expr = true


# Maximum length of comments. No effect unless wrap_comments = true.
#   Default value: 80
#   Possible values: any positive integer
#   Stable: No (tracking issue: #3349)
# Note: A value of 0 results in wrap_comments being applied regardless of a line's width.
comment_width = 80


# Replace strings of _ wildcards by a single .. in tuple patterns
#   Default value: false
#   Possible values: true, false
condense_wildcard_suffixes = true


# Brace style for control flow constructs
#   Default value: "AlwaysSameLine"
#   Possible values: "AlwaysNextLine", "AlwaysSameLine", "ClosingNextLine"
#ClosingNextLine separates the closing } from a following else, AlwaysSameLine has them on the same line (`} else {`)
control_brace_style = "AlwaysNextLine"


# Specifies which edition is used by the parser.
#   Default value: "2015"
#   Possible values: "2015", "2018", "2021"
edition = "2021"


# Put empty-body functions and impls on a single line
#   Default value: true
#   Possible values: true, false
empty_item_single_line = true


# The maximum length of enum variant having discriminant, that gets vertically aligned with others. Variants without discriminants would be ignored for the purpose of alignment.
# Note that this is not how much whitespace is inserted, but instead the longest variant name that doesn't get ignored when aligning.
# Basically which value assignments to skip for aligning the equals sign if they exceed the length of this value.
#   Default value : 0
#   Possible values: any positive integer
enum_discrim_align_threshold = 20


# Error if Rustfmt is unable to get all lines within max_width, except for comments and string literals. If this happens, then it is a bug in Rustfmt. You might be able to work around the bug by refactoring your code to avoid long/complex expressions, usually by extracting a local variable or using a shorter name.
#   Default value: false
#   Possible values: true, false
error_on_line_overflow = false


# Error if unable to get comments or string literals within max_width, or they are left with trailing whitespaces.
#   Default value: false
#   Possible values: true, false
error_on_unformatted = false


# Maximum width of the args of a function call before falling back to vertical formatting.
#   Default value: 60
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for fn_call_width will take precedence.
# fn_call_width = 60


# Control the layout of parameters in function signatures.
#   Default value: "Tall"
#   Possible values: "Compressed", "Tall", "Vertical"
# Tall only when it doesn't fit vs Vertical which is always. Compressed will line break only if it doesn't fit.
fn_params_layout = "Tall"


# Put single-expression functions on a single line
#   Default value: false
#   Possible values: true, false
fn_single_line = true


# Always print the abi for extern items
#   Default value: true
#   Possible values: true, false
# Note: Non-"C" ABIs are always printed. If false then "C" is removed.
# adds "C" to Â´extern "C" { ... }` blocks
force_explicit_abi = true


# Force multiline closure and match arm bodies to be wrapped in a block
#   Default value: false
#   Possible values: false, true
force_multiline_blocks = false


# Format code snippet included in doc comments.
#   Default value: false
#   Possible values: true, false
format_code_in_doc_comments = false


# Max width for code snippets included in doc comments. Only used if format_code_in_doc_comments is true.
#   Default value: 100
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
doc_comment_code_block_width = 100


# Format generated files. A file is considered generated if any of the first several lines contain a @generated comment marker. The number of lines to check is configured by generated_marker_line_search_limit.
# By default, generated files are reformatted, i. e. @generated marker is ignored. This option is currently ignored for stdin (@generated in stdin is ignored.)
#   Default value: true
#   Possible values: true, false
format_generated_files = false


# Number of lines to check for a @generated pragma header, starting from the top of the file. Setting this value to 0 will treat all files as non-generated. Whenformat_generated_files is true, this option has no effect.
#   Default value: 5
#   Possible values: any positive integer
generated_marker_line_search_limit = 5


# Format the metavariable matching patterns in macros.
#   Default value: false
#   Possible values: true, false
format_macro_matchers = false


# Format the bodies of declarative macro definitions.
#   Default value: true
#   Possible values: true, false
format_macro_bodies = true


# Skip formatting the bodies of macro invocations with the following names.
# rustfmt will not format any macro invocation for macros with names set in this list. Including the special value "*" will prevent any macro invocations from being formatted.
# Note: This option does not have any impact on how rustfmt formats macro definitions.
#   Default value: []
#   Possible values: a list of macro name idents, ["name_0", "name_1", ..., "*"]
# [] (default):
#   rustfmt will follow its standard approach to formatting macro invocations.
#   No macro invocations will be skipped based on their name. More information about rustfmt's standard macro invocation formatting behavior can be found in #5437.
# ["lorem"]:
#   The named macro invocations will be skipped.
# ["*"]:
#   The special selector * will skip all macro invocations.
skip_macro_invocations = []


# Format string literals where necessary to fit within max_width
#   Default value: false
#   Possible values: true, false
format_strings = true


# Use tab characters for indentation, spaces for alignment
#   Default value: false
#   Possible values: true, false
hard_tabs = false


# Control the case of the letters in hexadecimal literal values
#   Default value: Preserve
#   Possible values: Preserve, Upper, Lower
hex_literal_case = "Upper"


# Show parse errors if the parser failed to parse files.
#   Default value: true
#   Possible values: true, false
show_parse_errors = true


# Skip formatting files and directories that match the specified pattern. The pattern format is the same as .gitignore. Be sure to use Unix/forwardslash / style paths. This path style will work on all platforms. Windows style paths with backslashes \ are not supported.
#   Default value: format every file
#   Possible values: See an example below
# Examples
#   Specific files: ["/path/to/file.rs", "/path/to/file2.ts"]    # can have newlines for config file between filenames
#   Directory: [ "example" ]                                     # exclude all files in example/
#   Everything: ["/"]                                            # exclude all files
ignore = []


# Indent style of imports
#   Default Value: "Block"
#   Possible values: "Block", "Visual"
# Block: Indents to next block level, on the next line
# Visual: Indents to align with other options, without new line, next line first item is aligned with first line first option
imports_indent = "Block"


# Item layout inside a imports block
#   Default value: "Mixed"
#   Possible values: "Horizontal", "HorizontalVertical", "Mixed", "Vertical"
# Mixed: Horizntal until max_width, then a line break and continue with horizontal
# Horizontal: Always on one line, may exceed max_width
# Vertical: Always one item per line
# HorizontalVertical: Horizontal, but if it exceeds max_width, switch to vertical instead# 
imports_layout = "HorizontalVertical"


# Indent on expressions or items.
#   Default value: "Block"
#   Possible values: "Block", "Visual"
# Block: New line, then indented to next block level
# Visual: No new line, indented to first item on first line
indent_style = "Block"


# Write an item and its attribute on the same line if their combined width is below a threshold
#   Default value: 0
#   Possible values: any positive integer
# 0 to always put a new line
inline_attribute_width = 0


# Controls whether arm bodies are wrapped in cases where the first line of the body cannot fit on the same line as the => operator.
# The Style Guide requires that bodies are block wrapped by default if a line break is required after the =>, but this option can be used to disable that behavior to prevent wrapping arm bodies in that event, so long as the body contains neither multiple statements nor line comments.
#   Default value: true
#   Possible values: true, false
match_arm_blocks = true


# Controls whether to include a leading pipe on match arms
#   Default value: Never
#   Possible values: Always, Never, Preserve
match_arm_leading_pipes = "Never"


# Put a trailing comma after a block based match arm (non-block arms are not affected)
#   Default value: false
#   Possible values: true, false
match_block_trailing_comma = true


# Merge multiple derives into a single one.
#   Default value: true
#   Possible values: true, false
merge_derives = true


# Controls how imports are structured in use statements. Imports will be merged or split to the configured level of granularity.
# Similar to other import related configuration options, this option operates within the bounds of user-defined groups of imports. See group_imports for more information on import groups.
# Note that rustfmt will not modify the granularity of imports containing comments if doing so could potentially lose or misplace said comments.
#   Default value: Preserve
#   Possible values: Preserve, Crate, Module, Item, One
# Preserve: No changes
# Create: Merge imports from the same crate into a single use statement. Conversely, imports from different crates are split into separate statements.
# Module: Merge imports from the same module into a single use statement. Conversely, imports from different modules are split into separate statements.
# Item: Flatten imports so that each has its own use statement.
# One: Merge all imports into a single use statement as long as they have the same visibility.
imports_granularity = "Module"


# Unix or Windows line endings
#   Default value: "Auto"
#   Possible values: "Auto", "Native", "Unix", "Windows"
# Auto: First line ending detected will be used
# Native: Based on OS
# Unix/Windows: Force LF / CRLF
newline_style = "Native"


# Convert /* */ comments to // comments where possible
#   Default value: false
#   Possible values: true, false
normalize_comments = false


# Convert #![doc] and #[doc] attributes to //! and /// doc comments.
#   Default value: false
#   Possible values: true, false
normalize_doc_attributes = false


# When structs, slices, arrays, and block/array-like macros are used as the last argument in an expression list, allow them to overflow (like blocks/closures) instead of being indented on a new line.
# Basically allow closing braces to be on the same line.
#   Default value: false
#   Possible values: true, false
overflow_delimited_expr = false


# Remove nested parens. `((((foo))))` becomes `(foo)`
#   Default value: true
#   Possible values: true, false
remove_nested_parens = true


# Reorder impl items. type and const are put first, then macros and methods.
#   Default value: false
#   Possible values: true, false
reorder_impl_items = false


# Reorder import and extern crate statements alphabetically in groups (a group is separated by a newline).
#   Default value: true
#   Possible values: true, false
reorder_imports = true


# Controls the strategy for how consecutive imports are grouped together.
# Controls the strategy for grouping sets of consecutive imports. Imports may contain newlines between imports and still be grouped together as a single set, but other statements between imports will result in different grouping sets.
#   Default value: Preserve
#   Possible values: Preserve, StdExternalCrate, One
# Each set of imports (one or more use statements, optionally separated by newlines) will be formatted independently. Other statements such as mod ... or extern crate ... will cause imports to not be grouped together.
# Preserve: Preserve the source file's import groups.
# StdExternalCrate: Discard existing import groups, and create three groups for:
#   std, core and alloc
#   external crates
#   self, super and crate imports.
# One: Discard existing import groups, and create a single group for everything
group_imports = "StdExternalCrate"


# Reorder mod declarations alphabetically in group.
#   Default value: true
#   Possible values: true, false
# Note mod with #[macro_export] will not be reordered since that could change the semantics of the original source code.
reorder_modules = true


# The width threshold for an array element to be considered "short".
# The layout of an array is dependent on the length of each of its elements. If the length of every element in an array is below this threshold (all elements are "short") then the array can be formatted in the mixed/compressed style, but if any one element has a length that exceeds this threshold then the array elements will have to be formatted vertically.
#   Default value: 10
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
short_array_element_width_threshold = 8


# Don't reformat out of line modules
#   Default value: false
#   Possible values: true, false
skip_children = false


# Maximum line length for single line if-else expressions. A value of 0 (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when use_small_heuristics is set to Off.
#   Default value: 50
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for single_line_if_else_max_width will take precedence.
# single_line_if_else_max_width = 50


# Maximum line length for single line let-else statements. See the let-else statement section of the Rust Style Guide for more details on when a let-else statement may be written on a single line. A value of 0 (zero) means the divergent else block will always be formatted over multiple lines. Note this occurs when use_small_heuristics is set to Off.
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for single_line_let_else_max_width will take precedence.
#   Default value: 50
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# single_line_let_else_max_width = 50


# Leave a space after the colon.
#   Default value: true
#   Possible values: true, false
space_after_colon = true


# Leave a space before the colon.
#   Default value: false
#   Possible values: true, false
space_before_colon = false


# Put spaces around the .., ..=, and ... range operators
#   Default value: false
#   Possible values: true, false
spaces_around_ranges = false


# The maximum diff of width between struct fields to be aligned with each other.
#   Default value : 0
#   Possible values: any non-negative integer
# 0 to never align
struct_field_align_threshold = 20


# Put small struct literals on a single line
#   Default value: true
#   Possible values: true, false
struct_lit_single_line = false


# Maximum width in the body of a struct literal before falling back to vertical formatting. A value of 0 (zero) results in struct literals always being broken into multiple lines. Note this occurs when use_small_heuristics is set to Off.
#   Default value: 18
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for struct_lit_width will take precedence.
# struct_lit_width = 18


# Maximum width in the body of a struct variant before falling back to vertical formatting. A value of 0 (zero) results in struct literals always being broken into multiple lines. Note this occurs when use_small_heuristics is set to Off.
#   Default value: 35
#   Possible values: any positive integer that is less than or equal to the value specified for max_width
# By default this option is set as a percentage of max_width provided by use_small_heuristics, but a value set directly for struct_variant_width will take precedence.
# struct_variant_width = 35


# How to handle trailing commas for lists
#   Default value: "Vertical"
#   Possible values: "Always", "Never", "Vertical"
# Always: Always put a trailing comma
# Never: Always remove trailing commas
# Vertical: Place trailing comma when list is vertical, remove if list is horizontal
trailing_comma = "Vertical"


# Add trailing semicolon after break, continue and return
#   Default value: true
#   Possible values: true, false
trailing_semicolon = true


# Determines if + or = are wrapped in spaces in the punctuation of types
#   Default value: "Wide"
#   Possible values: "Compressed", "Wide"
type_punctuation_density = "Wide"


# Use field initialize shorthand if possible.
#   Default value: false
#   Possible values: true, false
use_field_init_shorthand = false


# This option can be used to simplify the management and bulk updates of the granular width configuration settings (fn_call_width, attr_fn_like_width, struct_lit_width, struct_variant_width, array_width, chain_width, single_line_if_else_max_width), that respectively control when formatted constructs are multi-lined/vertical based on width.
# Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by use_small_heuristics.
#   Default value: "Default"
#   Possible values: "Default", "Off", "Max"
# Default:
#   The values for the granular width settings are calculated as a ratio of the value for max_width.
#   The ratios are:
#     fn_call_width - 60%
#     attr_fn_like_width - 70%
#     struct_lit_width - 18%
#     struct_variant_width - 35%
#     array_width - 60%
#     chain_width - 60%
#     single_line_if_else_max_width - 50%
#     single_line_let_else_max_width - 50%
# Off: The granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.
# Max: Each granular width setting is set to the same value as max_width.
#      So if max_width is set to 200, then all the width settings are also set to 200.
use_small_heuristics = "Default"


# Replace uses of the try! macro by the ? shorthand
#   Default value: false
#   Possible values: true, false
use_try_shorthand = false


# Forces the where clause to be laid out on a single line.
#   Default value: false
#   Possible values: true, false
where_single_line = false


# Break comments to fit on the line
# Note that no wrapping will happen if:
# - The comment is the start of a markdown header doc comment
# - An URL was found in the comment
#   Default value: false
#   Possible values: true, false
wrap_comments = true

